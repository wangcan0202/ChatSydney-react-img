
homepage:
https://test123-kzkq.onrender.com/

homepage config:
https://dashboard.render.com/

config:
https://github.com/viopsa233/AI-testers-Forum/discussions/68

最近B站上看了一个render一键部署go-proxy-bingai的视频，我试了下搭建了一个ChatSydney，Render云平台提供了免费搭建应用的资源，512M RAM ，0.1 CPU，可运行时长每月750 hours，带宽每月200G，长时间不使用会休眠，有请求时自动唤醒，实测搭建ChatSydney还是没问题的，服务器是国外的，相当于自带魔法，有需要的小伙伴可以试试，有问题随时交流
1 github账号一个
2 登录render （可使用github账号，也可使用邮箱注册）

配置方法：
步骤1：准备github上的代码
   1）访问 https://github.com/renqabs/ChatSydney-react-img
   2）fork 给自己：例如 https://github.com/wangcan0202/ChatSydney-react-img main 分支


步骤2：申请免费域名
   1）访问：https://dashboard.render.com/
   2）可以选择 github登录 或者 google账号登录
   3）进入界面后，选择 New -> Web Service
   4）在 Create a new Web Service 界面中，选择 
       build and deploy from a git repository
   5）在 Connect a repository 页面中选择 步骤1中创建的git
   6）在Runtime 中选择 docker
   7）在Instance Type 中选择 Free
   8）点击Advaned,将Auto-Deploy 改为No
   9）点击 Create Web Service
   10） 在部署页面中如果失败，请点击右上角的手动发布
      
Flutter 如何与编写C/C++插件
https://medium.com/@khaifunglim97/how-to-build-a-flutter-app-with-c-c-libraries-via-ffi-on-android-and-ios-including-opencv-1e2124e85019



#github 如何删除Project
步骤1：导航到需要删除的项目，例如：
   https://github.com/wangcan0202/go-proxy-bingai
   进入项目后，能看到 Code / Pull Request  ...../Settings
   点击最后一项，也是最右侧项，进入Settings
步骤2：进入 Settings 在屏幕左侧为树形列表，右侧为具体操作区
    General 这部分可以修改项目名称
    拉到最下方，有“Danger Zone”
    最后一项：Delete this repository 按钮就是删除本project,点击后按照提示操作就可以了



代码简单解析
   本工程代码主要是以docker方式进行配置的，所以，首先需要看的文件是：
       /Dockerfile
          在这个文件中：其他都是配置环境的参数，最重要代码是：
              CMD ["python", "-m","main","-H","0.0.0.0:8080"]
          表明，本工程是使用python作为web service的，入口文件是 main.py
      
      /main.py 入口文件，实现web service ,web socket server 作为proxy 访问 bing AI
          if __name__ == '__main__': #此处开始时 main.py 入口执行处

          loop.run_until_complete(main(host, port)) #以线程方式执行 main() 函数，函数定义如下
          # 主要函数
          async def main(host, port):

          #main函数中
          app.router.add_get('/ws/', websocket_handler) #web socket 处理流程 ,不分析，只分析 web service
          app.router.add_get('/{tail:.*}', http_handler) # web service 处理流程

          #重要全局变量定义：定义根目录
          public_dir = '/public'

          #http_handler 函数为web service 处理函数，用于页面显示
          async def http_handler(request):
              file_path = request.path
              #缺省文件是 index.html
              if file_path == "/":
                  file_path = "/index.html"
              full_path = os.path.realpath('.' + public_dir + file_path)

              #不是根目录路径，禁止访问
              if not full_path.startswith(os.path.realpath('.' + public_dir)):
                   raise web.HTTPForbidden()

              #网页文件返回显示HTTP
              response = web.FileResponse(full_path)
              response.headers['Cache-Control'] = 'no-store'
              return response

          



      




